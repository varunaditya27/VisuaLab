generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  username  String   @unique
  passwordHash String
  name      String?
  avatarUrl String?
  role      Role     @default(VIEWER)
  images    Image[]
  albums    Album[]  @relation("AlbumOwner")
  likes     Like[]
  comments  Comment[]
  views     ImageView[]
  palettes  Palette[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  album       Album?   @relation(fields: [albumId], references: [id])
  albumId     String?
  title       String?
  caption     String?
  altText     String?
  mime        String
  width       Int
  height      Int
  sizeBytes   Int
  r2Key       String   @unique
  thumbKey    String?
  responsive  Json?
  exif        Json?
  license     String?
  attribution String?
  privacy     Privacy  @default(PUBLIC)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        ImageTag[]
  likes       Like[]
  comments    Comment[]
  views       ImageView[]
}

model Album {
  id        String  @id @default(cuid())
  name      String
  description String?
  owner     User    @relation("AlbumOwner", fields: [ownerId], references: [id])
  ownerId   String
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  images ImageTag[]
}

model ImageTag {
  image   Image @relation(fields: [imageId], references: [id])
  imageId String
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([imageId, tagId])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum Privacy {
  PUBLIC
  UNLISTED
  PRIVATE
}

model Like {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  image    Image  @relation(fields: [imageId], references: [id])
  imageId  String
  createdAt DateTime @default(now())

  @@id([userId, imageId])
}

model Comment {
  id        String   @id @default(cuid())
  image     Image    @relation(fields: [imageId], references: [id])
  imageId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model ImageView {
  id        String   @id @default(cuid())
  image     Image    @relation(fields: [imageId], references: [id])
  imageId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  ip        String?
  createdAt DateTime @default(now())
}

model Palette {
  id        String   @id @default(cuid())
  name      String
  json      Json
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
